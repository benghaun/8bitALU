/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module testSM_2 (
    input clk,
    input rst,
    input [7:0] result,
    output reg [5:0] alufn,
    output reg [7:0] a,
    output reg [7:0] b,
    input pause,
    output reg error,
    output reg [7:0] errorA,
    output reg [7:0] errorB,
    output reg [7:0] errorResult,
    output reg [7:0] errorAlufn
  );
  
  
  
  reg [26:0] M_counter_d, M_counter_q = 1'h0;
  localparam ADD_state = 5'd0;
  localparam ADDV_state = 5'd1;
  localparam ADDZ_state = 5'd2;
  localparam SUB_state = 5'd3;
  localparam SUBZ_state = 5'd4;
  localparam CMPEQT_state = 5'd5;
  localparam CMPEQF_state = 5'd6;
  localparam CMPLTT_state = 5'd7;
  localparam CMPLTF_state = 5'd8;
  localparam CMPLET_state = 5'd9;
  localparam CMPLEF_state = 5'd10;
  localparam AND_state = 5'd11;
  localparam OR_state = 5'd12;
  localparam XOR_state = 5'd13;
  localparam A_state = 5'd14;
  localparam SHL_state = 5'd15;
  localparam SHR_state = 5'd16;
  localparam SRA_state = 5'd17;
  localparam MULPP_state = 5'd18;
  localparam MULV_state = 5'd19;
  localparam MULNN_state = 5'd20;
  localparam MULNP_state = 5'd21;
  localparam ERROR_state = 5'd22;
  
  reg [4:0] M_state_d, M_state_q = ADD_state;
  reg [7:0] M_error_a_d, M_error_a_q = 1'h0;
  reg [7:0] M_error_b_d, M_error_b_q = 1'h0;
  reg [7:0] M_error_result_d, M_error_result_q = 1'h0;
  reg [7:0] M_error_alufn_d, M_error_alufn_q = 1'h0;
  
  always @* begin
    M_state_d = M_state_q;
    M_error_alufn_d = M_error_alufn_q;
    M_counter_d = M_counter_q;
    M_error_result_d = M_error_result_q;
    M_error_b_d = M_error_b_q;
    M_error_a_d = M_error_a_q;
    
    alufn = 6'h00;
    a = 8'h00;
    b = 8'h00;
    error = 1'h0;
    if (!pause) begin
      M_counter_d = M_counter_q + 1'h1;
    end
    
    case (M_state_q)
      ADD_state: begin
        alufn = 6'h00;
        a = 8'h1e;
        b = 8'h37;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h55) begin
            M_state_d = ADDV_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'h1e;
            M_error_b_d = 8'h37;
            M_error_result_d = result;
            M_error_alufn_d = 6'h00;
          end
        end
      end
      ADDV_state: begin
        alufn = 6'h00;
        a = 8'hf1;
        b = 8'hee;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'hdf) begin
            M_state_d = ADDZ_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'hf1;
            M_error_b_d = 8'hee;
            M_error_result_d = result;
            M_error_alufn_d = 6'h00;
          end
        end
      end
      ADDZ_state: begin
        alufn = 6'h00;
        a = 8'h00;
        b = 8'h00;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h00) begin
            M_state_d = SUB_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'h00;
            M_error_b_d = 8'h00;
            M_error_result_d = result;
            M_error_alufn_d = 6'h00;
          end
        end
      end
      SUB_state: begin
        alufn = 6'h01;
        a = 8'h55;
        b = 8'h1e;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h37) begin
            M_state_d = SUBZ_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'h55;
            M_error_b_d = 8'h1e;
            M_error_result_d = result;
            M_error_alufn_d = 6'h01;
          end
        end
      end
      SUBZ_state: begin
        alufn = 6'h01;
        a = 8'h00;
        b = 8'h00;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h00) begin
            M_state_d = CMPEQT_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'h00;
            M_error_b_d = 8'h00;
            M_error_result_d = result;
            M_error_alufn_d = 6'h01;
          end
        end
      end
      CMPEQT_state: begin
        alufn = 6'h33;
        a = 8'he0;
        b = 8'he0;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h01) begin
            M_state_d = CMPEQF_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'he0;
            M_error_b_d = 8'he0;
            M_error_result_d = result;
            M_error_alufn_d = 6'h33;
          end
        end
      end
      CMPEQF_state: begin
        alufn = 6'h33;
        a = 8'hfe;
        b = 8'he1;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h00) begin
            M_state_d = CMPLTT_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'hfe;
            M_error_b_d = 8'he1;
            M_error_result_d = result;
            M_error_alufn_d = 6'h33;
          end
        end
      end
      CMPLTT_state: begin
        alufn = 6'h35;
        a = 8'h1e;
        b = 8'h55;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h01) begin
            M_state_d = CMPLTF_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'h1e;
            M_error_b_d = 8'h55;
            M_error_result_d = result;
            M_error_alufn_d = 6'h35;
          end
        end
      end
      CMPLTF_state: begin
        alufn = 6'h35;
        a = 8'hde;
        b = 8'had;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h00) begin
            M_state_d = CMPLET_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'hde;
            M_error_b_d = 8'had;
            M_error_result_d = result;
            M_error_alufn_d = 6'h35;
          end
        end
      end
      CMPLET_state: begin
        alufn = 6'h37;
        a = 8'hc0;
        b = 8'hc0;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h01) begin
            M_state_d = CMPLEF_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'hc0;
            M_error_b_d = 8'hc0;
            M_error_result_d = result;
            M_error_alufn_d = 6'h37;
          end
        end
      end
      CMPLEF_state: begin
        alufn = 6'h37;
        a = 8'hfe;
        b = 8'hed;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h00) begin
            M_state_d = AND_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'hfe;
            M_error_b_d = 8'hed;
            M_error_result_d = result;
            M_error_alufn_d = 6'h37;
          end
        end
      end
      AND_state: begin
        alufn = 6'h18;
        a = 8'h96;
        b = 8'h35;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h14) begin
            M_state_d = OR_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'h96;
            M_error_b_d = 8'h35;
            M_error_result_d = result;
            M_error_alufn_d = 6'h18;
          end
        end
      end
      OR_state: begin
        alufn = 6'h1e;
        a = 8'hb2;
        b = 8'h34;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'hb6) begin
            M_state_d = XOR_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'hb2;
            M_error_b_d = 8'h34;
            M_error_result_d = result;
            M_error_alufn_d = 6'h1e;
          end
        end
      end
      XOR_state: begin
        alufn = 6'h16;
        a = 8'hd6;
        b = 8'h65;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'hb3) begin
            M_state_d = A_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'hd6;
            M_error_b_d = 8'h65;
            M_error_result_d = result;
            M_error_alufn_d = 6'h16;
          end
        end
      end
      A_state: begin
        alufn = 6'h1a;
        a = 8'h66;
        b = 8'hdc;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h66) begin
            M_state_d = SHL_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'h66;
            M_error_b_d = 8'hdc;
            M_error_result_d = result;
            M_error_alufn_d = 6'h1a;
          end
        end
      end
      SHL_state: begin
        alufn = 6'h20;
        a = 8'h1e;
        b = 8'hff;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h00) begin
            M_state_d = SHR_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'h1e;
            M_error_b_d = 8'hff;
            M_error_result_d = result;
            M_error_alufn_d = 6'h20;
          end
        end
      end
      SHR_state: begin
        alufn = 6'h21;
        a = 8'hfa;
        b = 8'h11;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h7d) begin
            M_state_d = SRA_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'hfa;
            M_error_b_d = 8'h11;
            M_error_result_d = result;
            M_error_alufn_d = 6'h21;
          end
        end
      end
      SRA_state: begin
        alufn = 6'h23;
        a = 8'hf0;
        b = 8'h0d;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'hff) begin
            M_state_d = MULPP_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'h1e;
            M_error_b_d = 8'hff;
            M_error_result_d = result;
            M_error_alufn_d = 6'h23;
          end
        end
      end
      MULPP_state: begin
        alufn = 6'h02;
        a = 8'h04;
        b = 8'h05;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h14) begin
            M_state_d = MULV_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'h04;
            M_error_b_d = 8'h05;
            M_error_result_d = result;
            M_error_alufn_d = 6'h02;
          end
        end
      end
      MULV_state: begin
        alufn = 6'h02;
        a = 8'h20;
        b = 8'h1e;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'hc0) begin
            M_state_d = MULNN_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'h20;
            M_error_b_d = 8'h1e;
            M_error_result_d = result;
            M_error_alufn_d = 6'h02;
          end
        end
      end
      MULNN_state: begin
        alufn = 6'h02;
        a = 8'hfc;
        b = 8'hfb;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'h14) begin
            M_state_d = MULNP_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'hfc;
            M_error_b_d = 8'hfb;
            M_error_result_d = result;
            M_error_alufn_d = 6'h02;
          end
        end
      end
      MULNP_state: begin
        alufn = 6'h02;
        a = 8'hb0;
        b = 8'h01;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (result == 8'hb0) begin
            M_state_d = ADD_state;
            M_counter_d = 27'h0000000;
          end else begin
            M_state_d = ERROR_state;
            M_error_a_d = 8'hb0;
            M_error_b_d = 8'h01;
            M_error_result_d = result;
            M_error_alufn_d = 6'h02;
          end
        end
      end
      ERROR_state: begin
        error = 1'h1;
      end
    endcase
    errorA = M_error_a_q;
    errorB = M_error_b_q;
    errorResult = M_error_result_q;
    errorAlufn = M_error_alufn_q;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_error_a_q <= 1'h0;
      M_error_b_q <= 1'h0;
      M_error_result_q <= 1'h0;
      M_error_alufn_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_error_a_q <= M_error_a_d;
      M_error_b_q <= M_error_b_d;
      M_error_result_q <= M_error_result_d;
      M_error_alufn_q <= M_error_alufn_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
